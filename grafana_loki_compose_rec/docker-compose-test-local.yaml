# https://grafana.com/tutorials/run-grafana-behind-a-proxy/
# Lors de la mep, remettre les replicas a 3 

version: "3.8"

networks:
  loki:

volumes:
  prometheus:
  grafana:
  alertmanager-data:


services:

  #traefik de test en local GUC
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.9
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - default
      - loki


  # Since the Loki containers are running as user 10001 and the mounted data volume is owned by root,
  # Loki would not have permissions to create the directories.
  # Therefore the init container changes permissions of the mounted directory.
  init:
    image: grafana/loki:2.6.1
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/loki"
    volumes:
      - ./loki:/loki
    networks:
      - loki

  grafana:
    image: grafana/grafana:9.1.6
    ports:
      - "3000:3000"
    environment:
      - "GF_USERS_DEFAULT_THEME=dark"
      - "GF_SERVER_DOMAIN=grafana-flux-prod.korian.cloud"
      - "GF_SECURITY_ADMIN_USER=adminflux"
      - "GF_SECURITY_ADMIN_PASSWORD=welcome"
      - "GF_SMTP_ENABLED=true"
      - "GF_SMTP_HOST=mail.korian.com:25"
      - "GF_SMTP_FROM_ADDRESS=grafana-flux@korian.fr"
      - "GF_SMTP_FROM_NAME=grafana-flux"
      - "GF_AUTH_ANONYMOUS_ENABLED=true"
      - "GF_AUTH_ANONYMOUS_ORG_NAME=public"
      - "GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer"
    volumes:
      - ./config/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yml
      - grafana:/var/lib/grafana
    labels:
      - "traefik.enable=true" 
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"     
      # - traefik.http.routers.grafana.rule=Host(`grafana-flux.prod`) && PathPrefix(`/grafana`)
      - "traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)"
      - "traefik.docker.network=default"
      # - "traefik.docker.network=reverse-proxy"  
    networks:
      - loki

  prometheus:
    image: prom/prometheus:v2.27.0
    ports:
      - 9090:9090
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    command:
      [
        '--log.level=debug',
        '--config.file=/etc/prometheus/prometheus.yml',
        '--query.lookback-delta=30s'
      ]
    networks:
      - loki

  promtail:
    image: grafana/promtail:2.6.1
    volumes:
      - ./loki/:/var/log/
      - ./config:/etc/promtail/
    ports:
      - "9080:9080"
    command: -config.file=/etc/promtail/promtail.yaml
    networks:
      - loki

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler &&
        minio server /data
    environment:
      - MINIO_ACCESS_KEY=loki
      - MINIO_SECRET_KEY=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000:9000"
    volumes:
      - ./.data/minio:/data
    networks:
      - loki

  loki-gateway:
    image: nginx:1.19
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
    # ports:
    #   - "8090:80"
    #   - "3100"
    labels:
      - "traefik.enable=true" 
      - "traefik.http.services.loki-gateway.loadbalancer.server.port=3100"
      # - traefik.http.routers.loki-gateway.rule=Host(`loki-flux.prod`) && PathPrefix(`/loki`)
      - "traefik.http.routers.loki-gateway.rule=PathPrefix(`/loki`)"
      # - "traefik.docker.network=reverse-proxy"        
      - "traefik.docker.network=default"  
      # pwd : welcome
      - "traefik.http.middlewares.loki-auth.basicauth.users=loki:$$apr1$$6h20.xh0$$Iq.LldTHhwohpIgjgqyUS0"
    networks:
      - loki

  loki-frontend:
    image: grafana/loki:2.6.1
    volumes:
      - ./config:/etc/loki/
    ports:
      - "3100"
    command: "-config.file=/etc/loki/loki.yaml -target=query-frontend -frontend.downstream-url=http://loki-read:3100"
    networks:
      - loki
    deploy:
      mode: replicated
      replicas: 1

  loki-read:
    image: grafana/loki:2.6.1
    volumes:
      - ./config:/etc/loki/
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/loki.yaml -target=read"
    networks:
      - loki
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  loki-write:
    image: grafana/loki:2.6.1
    volumes:
      - ./config:/etc/loki/
    ports:
      - "3100"
      - "7946"

    command: "-config.file=/etc/loki/loki.yaml -target=write"
    networks:
      - loki
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  # alertmanager to enable receiving alerts
  alertmanager:
    image: prom/alertmanager:v0.23.0
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - "./config:/config"
      - alertmanager-data:/data
    command: --config.file=/config/alertmanager.yml --log.level=debug
    networks:
      - loki